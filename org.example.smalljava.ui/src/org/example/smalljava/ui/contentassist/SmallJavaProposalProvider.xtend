/*
 * generated by Xtext
 */
package org.example.smalljava.ui.contentassist

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.CrossReference
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.example.smalljava.smallJava.SJMember

import static extension org.example.smalljava.util.SmallJavaModelUtil.*
import org.eclipse.jface.viewers.StyledString
import com.google.inject.Inject
import org.example.smalljava.validation.SmallJavaAccessibility

/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
class SmallJavaProposalProvider extends AbstractSmallJavaProposalProvider {
	
	@Inject extension SmallJavaAccessibility
	
	// Assignment is not SmallJava Assignment
	override void completeSJSelectionExpression_Member(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference
			(assignment.getTerminal() as CrossReference, context, acceptor) [
				description |
				(description.getEObjectOrProxy as SJMember)
					.isAccessibleFrom(model)
			]
	}

	override getStyledDisplayString(EObject element, String qualifiedNameAsString, String shortName) {
		if (element instanceof SJMember) {
			// val member = element as SJMember
			// the cast is not necessary in Xtext 2.5.0
			new StyledString(element.memberAsStringWithType).
				append(new StyledString(" - " + element.containingClass.name,
					StyledString::QUALIFIER_STYLER))
		} else
			super.getStyledDisplayString(element, qualifiedNameAsString, shortName)
	}
}
