/*
 * generated by Xtext
 */
package org.example.smalljava.scoping

import com.google.inject.Inject
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.example.smalljava.smallJava.SJBlock
import org.example.smalljava.smallJava.SJExpression
import org.example.smalljava.smallJava.SJMemberSelection
import org.example.smalljava.smallJava.SJMethod
import org.example.smalljava.smallJava.SJVariableDeclaration
import org.example.smalljava.typing.SmallJavaTypeProvider

import static extension org.example.smalljava.util.SmallJavaModelUtil.*
import org.example.smalljava.smallJava.SJStatement
import org.example.smalljava.smallJava.SJClass
import org.example.smalljava.lib.SmallJavaLib

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
class SmallJavaScopeProvider extends AbstractDeclarativeScopeProvider {

	@Inject extension SmallJavaTypeProvider
	
	@Inject extension SmallJavaLib

	def scope_SJMember(SJMemberSelection sel, EReference r) {
		var parentScope = IScope::NULLSCOPE
		val type = sel.receiver.typeFor
		
		if (type == null || type.isPrimitive)
			return parentScope
		
		for (c : type.classHierarchyWithObject.reverseView) {
			parentScope = Scopes::scopeFor(
				c.selectMembers(sel), 
				parentScope
			)
		}
		Scopes::scopeFor(type.selectMembers(sel), parentScope)
	}

	def selectMembers(SJClass type, SJMemberSelection sel) {
		if (sel.methodinvocation)
			type.methods + type.fields
		else
			type.fields + type.methods
	}

	def scope_SJSymbolRef_symbol(SJExpression context, EReference r) {
		context.eContainer.symbolsDefinedBefore(context)
	}

	def dispatch IScope symbolsDefinedBefore(EObject container, EObject o) {
		container.eContainer.symbolsDefinedBefore(o.eContainer)
	}

	def dispatch IScope symbolsDefinedBefore(SJMethod m, EObject o) {
		// this ends recursion
		Scopes::scopeFor(m.params)
	}

	def dispatch IScope symbolsDefinedBefore(SJBlock b, EObject o) {
		Scopes::scopeFor(b.statements.variablesDeclaredBefore(o), 
			b.eContainer.symbolsDefinedBefore(o.eContainer))
	}
	
	def private variablesDeclaredBefore(List<SJStatement> list, EObject o) {
		list.subList(0, list.indexOf(o)).filter(typeof(SJVariableDeclaration))
	}
	
}
